# coding=utf-8
"""Tarea 3"""

import glfw
from OpenGL.GL import *
import OpenGL.GL.shaders
import numpy as np
import sys
import os.path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from grafica.gpu_shape import GPUShape, SIZE_IN_BYTES
import grafica.transformations as tr
import grafica.basic_shapes as bs
import grafica.scene_graph as sg
import grafica.easy_shaders as es
import grafica.lighting_shaders as ls
import grafica.performance_monitor as pm
from grafica.assets_path import getAssetPath
from operator import add
import time
import sira

__author__ = "Ivan Sipiran"
__license__ = "MIT"

# A class to store the application control
class Controller:
    def __init__(self):
        self.fillPolygon = True
        self.showAxis = True
        self.distance = 8
 
        self.camPosition = np.array([8,8,0])
        self.pitch = -np.pi/4
        self.yaw = -np.pi
        self.camUp = np.array([0.0,1.0,0.0])
        self.camRight = np.array([0,0,0])
        self.front = np.array([0,0,0])

        self.x = 0.0
        self.y = 0.0
        self.z = 0.0
        self.theta = 0.0
        self.rotate = True

controller = Controller()

def generateT(t):
    return np.array([[1, t, t**2, t**3]]).T


def bezierMatrix(P0, P1, P2, P3):
    
    # Generate a matrix concatenating the columns
    G = np.concatenate((P0, P1, P2, P3), axis=1)

    # Bezier base matrix is a constant
    Mb = np.array([[1, -3, 3, -1], [0, 3, -6, 3], [0, 0, 3, -3], [0, 0, 0, 1]])
    
    return np.matmul(G, Mb)

# M is the cubic curve matrix, N is the number of samples between 0 and 1
def evalCurve(M, N):
    # The parameter t should move between 0 and 1
    ts = np.linspace(0.0, 1.0, N)
    
    # The computed value in R3 for each sample will be stored here
    curve = np.ndarray(shape=(N, 3), dtype=float)
    
    for i in range(len(ts)):
        T = generateT(ts[i])
        curve[i, 0:3] = np.matmul(M, T).T
        
    return curve

def setPlot(texPipeline, axisPipeline, lightPipeline):
    projection = tr.perspective(45, float(width)/float(height), 0.1, 100)

    glUseProgram(axisPipeline.shaderProgram)
    glUniformMatrix4fv(glGetUniformLocation(axisPipeline.shaderProgram, "projection"), 1, GL_TRUE, projection)

    glUseProgram(texPipeline.shaderProgram)
    glUniformMatrix4fv(glGetUniformLocation(texPipeline.shaderProgram, "projection"), 1, GL_TRUE, projection)

    glUseProgram(lightPipeline.shaderProgram)
    glUniformMatrix4fv(glGetUniformLocation(lightPipeline.shaderProgram, "projection"), 1, GL_TRUE, projection)
    
    glUniform3f(glGetUniformLocation(lightPipeline.shaderProgram, "La"), 1.0, 1.0, 1.0)
    glUniform3f(glGetUniformLocation(lightPipeline.shaderProgram, "Ld"), 1.0, 1.0, 1.0)
    glUniform3f(glGetUniformLocation(lightPipeline.shaderProgram, "Ls"), 1.0, 1.0, 1.0)

    glUniform3f(glGetUniformLocation(lightPipeline.shaderProgram, "Ka"), 0.5, 0.5, 0.5)
    glUniform3f(glGetUniformLocation(lightPipeline.shaderProgram, "Kd"), 0.9, 0.9, 0.9)
    glUniform3f(glGetUniformLocation(lightPipeline.shaderProgram, "Ks"), 1.0, 1.0, 1.0)

    glUniform3f(glGetUniformLocation(lightPipeline.shaderProgram, "lightPosition"), 0, 0, 0)
    
    glUniform1ui(glGetUniformLocation(lightPipeline.shaderProgram, "shininess"), 1000)
    glUniform1f(glGetUniformLocation(lightPipeline.shaderProgram, "constantAttenuation"), 0.1)
    glUniform1f(glGetUniformLocation(lightPipeline.shaderProgram, "linearAttenuation"), 0.1)
    glUniform1f(glGetUniformLocation(lightPipeline.shaderProgram, "quadraticAttenuation"), 0.01)



def on_key(window, key, scancode, action, mods):

    if action != glfw.PRESS:
        return
    
    global controller

    print(action)

    if key == glfw.KEY_W:
        if controller.pitch >= np.pi:
            controller.pitch = -np.pi/4 + 0.005
        else:
            controller.pitch = controller.pitch + 0.005

    elif key == glfw.KEY_S:
        if controller.pitch <= -np.pi:
            controller.pitch = -np.pi/4 - 0.005
        else:
            controller.pitch = controller.pitch - 0.005

    elif key == glfw.KEY_D:
        if controller.yaw >= np.pi:
            controller.yaw = -np.pi + 0.005
        else:
            controller.yaw = controller.yaw + 0.005

    elif key == glfw.KEY_A:
        if controller.yaw <= -np.pi:
            controller.yaw = np.pi - 0.005
        else:
            controller.yaw = controller.yaw - 0.005

    elif key == glfw.KEY_LEFT:
        controller.z += 0.1
        controller.camPosition = controller.camPosition + np.array([0,0,0.1])

    elif key == glfw.KEY_RIGHT:
        controller.z -= 0.1
        controller.camPosition = controller.camPosition + np.array([0,0,-0.1])

    elif key == glfw.KEY_UP:
        controller.x -= 0.1
        if -np.pi/4 < controller.pitch:
            controller.camPosition = controller.camPosition + np.array([-0.1,0.1,0])
            controller.y += 0.1
        elif controller.pitch < -np.pi/4:
            controller.camPosition = controller.camPosition + np.array([-0.1,-0.1,0])
            controller.y -= 0.1
        else:
            controller.camPosition = controller.camPosition + np.array([-0.1,0.0,0])

    elif key == glfw.KEY_DOWN:
        controller.x -= 0.1
        controller.y -= 0.1
        controller.camPosition = controller.camPosition + np.array([-0.1,-0.1,0])

    elif key == glfw.KEY_SPACE:
        controller.fillPolygon = not controller.fillPolygon

    elif key == glfw.KEY_ESCAPE:
        glfw.set_window_should_close(window, True)

    else:
        print('Unknown key')

def processCamera():
    global controller

    yaw = controller.yaw
    pitch = controller.pitch

    frontx = np.cos(yaw) * np.cos(pitch)
    fronty = np.sin(pitch)
    frontz = np.sin(yaw) * np.cos(pitch)
    controller.front = np.array([frontx, fronty, frontz])
    controller.front = controller.front / np.linalg.norm(controller.front)

    controller.camRight = np.cross(controller.front, controller.camUp)
    controller.camRight = controller.camRight / np.linalg.norm(controller.camRight)

    controller.camUp = np.cross(controller.camRight, controller.front)
    controller.camUp = controller.camUp / np.linalg.norm(controller.camUp)


def readOFF(filename, color):
    vertices = []
    normals= []
    faces = []

    with open(filename, 'r') as file:
        line = file.readline().strip()
        assert line=="OFF"

        line = file.readline().strip()
        aux = line.split(' ')

        numVertices = int(aux[0])
        numFaces = int(aux[1])

        for i in range(numVertices):
            aux = file.readline().strip().split(' ')
            vertices += [float(coord) for coord in aux[0:]]
        
        vertices = np.asarray(vertices)
        vertices = np.reshape(vertices, (numVertices, 3))
        print(f'Vertices shape: {vertices.shape}')

        normals = np.zeros((numVertices,3), dtype=np.float32)
        print(f'Normals shape: {normals.shape}')

        for i in range(numFaces):
            aux = file.readline().strip().split(' ')
            aux = [int(index) for index in aux[0:]]
            faces += [aux[1:]]
            
            vecA = [vertices[aux[2]][0] - vertices[aux[1]][0], vertices[aux[2]][1] - vertices[aux[1]][1], vertices[aux[2]][2] - vertices[aux[1]][2]]
            vecB = [vertices[aux[3]][0] - vertices[aux[2]][0], vertices[aux[3]][1] - vertices[aux[2]][1], vertices[aux[3]][2] - vertices[aux[2]][2]]

            res = np.cross(vecA, vecB)
            normals[aux[1]][0] += res[0]  
            normals[aux[1]][1] += res[1]  
            normals[aux[1]][2] += res[2]  

            normals[aux[2]][0] += res[0]  
            normals[aux[2]][1] += res[1]  
            normals[aux[2]][2] += res[2]  

            normals[aux[3]][0] += res[0]  
            normals[aux[3]][1] += res[1]  
            normals[aux[3]][2] += res[2]  
        #print(faces)
        norms = np.linalg.norm(normals,axis=1)
        normals = normals/norms[:,None]

        color = np.asarray(color)
        color = np.tile(color, (numVertices, 1))

        vertexData = np.concatenate((vertices, color), axis=1)
        vertexData = np.concatenate((vertexData, normals), axis=1)

        print(vertexData.shape)

        indices = []
        vertexDataF = []
        index = 0

        for face in faces:
            vertex = vertexData[face[0],:]
            vertexDataF += vertex.tolist()
            vertex = vertexData[face[1],:]
            vertexDataF += vertex.tolist()
            vertex = vertexData[face[2],:]
            vertexDataF += vertex.tolist()
            
            indices += [index, index + 1, index + 2]
            index += 3

        return bs.Shape(vertexDataF, indices)

def createGPUShape(pipeline, shape):
    gpuShape = es.GPUShape().initBuffers()
    pipeline.setupVAO(gpuShape)
    gpuShape.fillBuffers(shape.vertices, shape.indices, GL_STATIC_DRAW)

    return gpuShape

def createOFFShape(pipeline, filename, r,g, b):
    shape = readOFF(getAssetPath(filename), (r, g, b))
    gpuShape = es.GPUShape().initBuffers()
    pipeline.setupVAO(gpuShape)
    gpuShape.fillBuffers(shape.vertices, shape.indices, GL_STATIC_DRAW)

    return gpuShape

def createSystem(pipeline):
    sunShape = createOFFShape(pipeline, 'sphere.off', 1.0,0.73,0.03)
    earthShape = createOFFShape(pipeline, 'sphere.off', 0.0, 0.59, 0.78) #REPLICAR PARA OTROS PLANETAS
    mercurioShape = createOFFShape(pipeline, 'sphere.off', 0.0, 0.0, 1.0) #NUEVO PLANETA
    venusShape = createOFFShape(pipeline, 'sphere.off', 0.0, 1.0, 0.0) #NUEVO PLANETA
    marteShape = createOFFShape(pipeline, 'sphere.off', 1.0, 0.0, 0.0) #NUEVO PLANETA
    jupiterShape = createOFFShape(pipeline, 'sphere.off', 1.0, 0.5, 0.0) #NUEVO PLANETA
    saturnoShape = createOFFShape(pipeline, 'sphere.off', 1.0, 0.0, 0.5) #NUEVO PLANETA
    #gpuWhiteCircle = createGPUShape(createColorCircle(30, 1, 1, 1, 1)) # USAR PARA ANILLO DE SATURNO
    uranoShape = createOFFShape(pipeline, 'sphere.off', 0.0, 1.0, 0.5) #NUEVO PLANETA
    neptunoShape = createOFFShape(pipeline, 'sphere.off', 0.0, 0.5, 1.0) #NUEVO PLANETA
    moonShape = createOFFShape(pipeline, 'sphere.off', 0.3, 0.3, 0.3)

    sunNode = sg.SceneGraphNode("sunNode")
    sunNode.transform = tr.uniformScale(0.6)
    sunNode.childs += [sunShape]

    earthNode = sg.SceneGraphNode("earthNode")
    earthNode.transform = tr.uniformScale(0.05)
    earthNode.childs += [earthShape]

    mercurioNode = sg.SceneGraphNode("mercurioNode") #NUEVO PLANETA
    mercurioNode.transform = tr.uniformScale(0.03)
    mercurioNode.childs += [mercurioShape]

    venusNode = sg.SceneGraphNode("venusNode") #NUEVO PLANETA
    venusNode.transform = tr.uniformScale(0.02)
    venusNode.childs += [venusShape]

    marteNode = sg.SceneGraphNode("marteNode") #NUEVO PLANETA
    marteNode.transform = tr.uniformScale(0.04)
    marteNode.childs += [marteShape]

    jupiterNode = sg.SceneGraphNode("jupiterNode") #NUEVO PLANETA
    jupiterNode.transform = tr.uniformScale(0.2)
    jupiterNode.childs += [jupiterShape]

    saturnoNode = sg.SceneGraphNode("saturnoNode") #NUEVO PLANETA
    saturnoNode.transform = tr.uniformScale(0.1)
    saturnoNode.childs += [saturnoShape]

    uranoNode = sg.SceneGraphNode("uranoNode") #NUEVO PLANETA
    uranoNode.transform = tr.uniformScale(0.08)
    uranoNode.childs += [uranoShape]

    neptunoNode = sg.SceneGraphNode("neptunoNode") #NUEVO PLANETA
    neptunoNode.transform = tr.uniformScale(0.09)
    neptunoNode.childs += [neptunoShape]

    moonNode = sg.SceneGraphNode("moonNode")
    moonNode.transform = tr.uniformScale(0.008)
    moonNode.childs += [moonShape]

    moonRotation = sg.SceneGraphNode("moonRotation")
    moonRotation.childs += [moonNode]

    earthRotation = sg.SceneGraphNode("earthRotation")
    earthRotation.childs += [earthNode]

    mercurioRotation = sg.SceneGraphNode("mercurioRotation") #NUEVO PLANETA
    mercurioRotation.childs += [mercurioNode]

    venusRotation = sg.SceneGraphNode("venusRotation") #NUEVO PLANETA
    venusRotation.childs += [venusNode]

    marteRotation = sg.SceneGraphNode("marteRotation") #NUEVO PLANETA
    marteRotation.childs += [marteNode]

    jupiterRotation = sg.SceneGraphNode("jupiterRotation") #NUEVO PLANETA
    jupiterRotation.childs += [jupiterNode]

    saturnoRotation = sg.SceneGraphNode("saturnoRotation") #NUEVO PLANETA
    saturnoRotation.childs += [saturnoNode]

    uranoRotation = sg.SceneGraphNode("uranoRotation") #NUEVO PLANETA
    uranoRotation.childs += [uranoNode]

    neptunoRotation = sg.SceneGraphNode("neptunoRotation") #NUEVO PLANETA
    neptunoRotation.childs += [neptunoNode]

    sunRotation = sg.SceneGraphNode("sunRotation")
    sunRotation.childs += [sunNode]
    
    moonPosition = sg.SceneGraphNode("moonSystem")
    moonPosition.transform = tr.translate(0.2,0.0,0.0)
    moonPosition.childs += [moonRotation] 

    moonSystem = sg.SceneGraphNode("moonSystem")
    moonSystem.childs += [moonPosition]
    
    earthPosition = sg.SceneGraphNode("earthSystem")
    earthPosition.transform = tr.translate(1.5, 0.0, 0.0)
    earthPosition.childs += [earthRotation]
    earthPosition.childs += [moonSystem]

    earthSystem = sg.SceneGraphNode("earthSystem")
    earthSystem.childs += [earthPosition]

    mercurioPosition = sg.SceneGraphNode("mercurioSystem") #PLANETA NUEVO
    mercurioPosition.transform = tr.translate(0.7, 0.0, 0.0)
    mercurioPosition.childs += [mercurioRotation]

    mercurioSystem = sg.SceneGraphNode("mercurioSystem") # NUEVO PLANETA
    mercurioSystem.childs += [mercurioPosition]

    venusPosition = sg.SceneGraphNode("venusSystem") #PLANETA NUEVO
    venusPosition.transform = tr.translate(0.9, 0.0, 0.0)
    venusPosition.childs += [venusRotation]

    venusSystem = sg.SceneGraphNode("venusSystem") # NUEVO PLANETA
    venusSystem.childs += [venusPosition]

    martePosition = sg.SceneGraphNode("marteSystem") #PLANETA NUEVO
    martePosition.transform = tr.translate(2.0, 0.0, 0.0)
    martePosition.childs += [marteRotation]

    marteSystem = sg.SceneGraphNode("marteSystem") # NUEVO PLANETA
    marteSystem.childs += [martePosition]

    jupiterPosition = sg.SceneGraphNode("jupiterSystem") #PLANETA NUEVO
    jupiterPosition.transform = tr.translate(3.0, 0.0, 0.0)
    jupiterPosition.childs += [jupiterRotation]

    jupiterSystem = sg.SceneGraphNode("jupiterSystem") # NUEVO PLANETA
    jupiterSystem.childs += [jupiterPosition]

    saturnoPosition = sg.SceneGraphNode("saturnoSystem") #PLANETA NUEVO
    saturnoPosition.transform = tr.translate(4.5, 0.0, 0.0)
    saturnoPosition.childs += [saturnoRotation]

    saturnoSystem = sg.SceneGraphNode("saturnoSystem") # NUEVO PLANETA
    saturnoSystem.childs += [saturnoPosition]

    uranoPosition = sg.SceneGraphNode("uranoSystem") #PLANETA NUEVO
    uranoPosition.transform = tr.translate(5.5, 0.0, 0.0)
    uranoPosition.childs += [uranoRotation]

    uranoSystem = sg.SceneGraphNode("uranoSystem") # NUEVO PLANETA
    uranoSystem.childs += [uranoPosition]

    neptunoPosition = sg.SceneGraphNode("neptunoSystem") #PLANETA NUEVO
    neptunoPosition.transform = tr.translate(6.5, 0.0, 0.0)
    neptunoPosition.childs += [neptunoRotation]

    neptunoSystem = sg.SceneGraphNode("neptunoSystem") # NUEVO PLANETA
    neptunoSystem.childs += [neptunoPosition]

    systemNode = sg.SceneGraphNode("solarSystem")
    systemNode.childs += [sunRotation]
    systemNode.childs += [earthSystem]
    systemNode.childs += [mercurioSystem]
    systemNode.childs += [venusSystem]
    systemNode.childs += [marteSystem]
    systemNode.childs += [jupiterSystem]
    systemNode.childs += [saturnoSystem]
    systemNode.childs += [uranoSystem]
    systemNode.childs += [neptunoSystem]
    
    return systemNode


def f_estela1(pipeline, step, p1, p2, p3, angulo):
    estelaShape = createGPUShape(pipeline, bs.createTextureQuad(1.0, 1.0))
    estelaShape.texture = es.textureSimpleSetup(
        getAssetPath("bandera.jpeg"), GL_REPEAT, GL_REPEAT, GL_LINEAR_MIPMAP_LINEAR, GL_NEAREST)
    glGenerateMipmap(GL_TEXTURE_2D)

    estelaNode = sg.SceneGraphNode('estela')
    estelaNode.transform = tr.matmul([tr.scale(0.04,0.07,0.03), tr.rotationY(np.pi/2), tr.rotationX(np.pi/2)])
    estelaNode.childs += [estelaShape]

    scene = sg.SceneGraphNode('system')
    scene.childs += [estelaNode]
    for i in range(200):
        node = sg.SceneGraphNode('estela'+str(i)+'_ls')
        node.transform = tr.matmul([tr.translate(C1[step-i,0] + p1, C1[step-i,1] + p2, C1[step-i,2] + p3), 
            tr.rotationY(angulo)])
        node.childs += [estelaNode]
        scene.childs += [node]

    return scene

def f_estela2(pipeline, step, p1, p2, p3, angulo):
    estelaShape = createGPUShape(pipeline, bs.createTextureQuad(1.0, 1.0))
    estelaShape.texture = es.textureSimpleSetup(
        getAssetPath("bandera.jpeg"), GL_REPEAT, GL_REPEAT, GL_LINEAR_MIPMAP_LINEAR, GL_NEAREST)
    glGenerateMipmap(GL_TEXTURE_2D)

    estelaNode = sg.SceneGraphNode('estela')
    estelaNode.transform = tr.matmul([tr.scale(0.04,0.07,0.03), tr.rotationY(np.pi/2), tr.rotationX(np.pi/2)])
    estelaNode.childs += [estelaShape]

    scene = sg.SceneGraphNode('system')
    scene.childs += [estelaNode]
    for i in range(200):
        node = sg.SceneGraphNode('estela'+str(i)+'_ls')
        node.transform = tr.matmul([tr.translate(C[step-i,0] + p1, C[step-i,1] + p2, C[step-i,2] + p3), 
            tr.rotationY(angulo)])
        node.childs += [estelaNode]
        scene.childs += [node]

    return scene


def createCarScene(pipeline):
    nave1 = createOFFShape(pipeline, 'alfa2.off', 0.5, 1.0, 0.9) 

    scale = 0.3
    nave1Node = sg.SceneGraphNode('nave1')  # Nuevo codigo de nave 
    nave1Node.transform = tr.matmul([tr.uniformScale(scale)])
    nave1Node.childs += [nave1]

    scene = sg.SceneGraphNode('system')
    scene.childs += [nave1Node]

    return scene


if __name__ == "__main__":

    # Initialize glfw
    if not glfw.init():
        glfw.set_window_should_close(window, True)

    width = 800
    height = 800
    title = "Tarea 3"
    window = glfw.create_window(width, height, title, None, None)

    if not window:
        glfw.terminate()
        glfw.set_window_should_close(window, True)

    glfw.make_context_current(window)

    # Connecting the callback function 'on_key' to handle keyboard events
    glfw.set_key_callback(window, on_key)

    # Assembling the shader program (pipeline) with both shaders
    axisPipeline = es.SimpleModelViewProjectionShaderProgram()
    texPipeline = es.SimpleTextureModelViewProjectionShaderProgram()
    lightPipeline = ls.SimplePhongShaderProgram()
    
    # Telling OpenGL to use our shader program
    glUseProgram(axisPipeline.shaderProgram)

    # Setting up the clear screen color
    glClearColor(0.1, 0.1, 0.2, 1.0)

    # As we work in 3D, we need to check which part is in front,
    # and which one is at the back
    glEnable(GL_DEPTH_TEST)
    #glEnable( GL_BLEND )
    #glBlendFunc( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA )

    # Creating shapes on GPU memory
    cpuAxis = bs.createAxis(7)
    gpuAxis = es.GPUShape().initBuffers()
    axisPipeline.setupVAO(gpuAxis)
    gpuAxis.fillBuffers(cpuAxis.vertices, cpuAxis.indices, GL_STATIC_DRAW)

    #estela = createStaticScene(texPipeline)

    solarSystem = createSystem(lightPipeline)

    #NOTA: Aqui creas un objeto con tu escena
    car1 = createCarScene(lightPipeline)
    car2 = createCarScene(lightPipeline)
    car3 = createCarScene(lightPipeline)
    car4 = createCarScene(lightPipeline)
    car5 = createCarScene(lightPipeline)
    nave = createCarScene(lightPipeline)
    
    #setPlot(texPipeline, axisPipeline,lightPipeline)

    perfMonitor = pm.PerformanceMonitor(glfw.get_time(), 2)

    # glfw will swap buffers as soon as possible
    glfw.swap_interval(0)

    N = 3500  # Para todas las curvas
    R0 = np.array([[0, 0, 0]]).T
    R1 = np.array([[-6, 0, 0]]).T
    R2 = np.array([[6, 0, 8]]).T
    R3 = np.array([[0, 0, 8]]).T
    
    M1 = bezierMatrix(R0, R1, R2, R3)
    bezierCurve1 = evalCurve(M1, N)

    R0 = np.array([[0, 0, 8]]).T
    R1 = np.array([[-6, 0, 8]]).T
    R2 = np.array([[6, 0, 0]]).T
    R3 = np.array([[0, 0, 0]]).T
    
    M2 = bezierMatrix(R0, R1, R2, R3)
    bezierCurve2 = evalCurve(M2, N)

    C = np.concatenate((bezierCurve1,bezierCurve2), axis=0)
    print(C.shape)

    # Bezier para el auto 2
    T0 = np.array([[0, 0, 0]]).T
    T1 = np.array([[4, 0, 0]]).T
    T2 = np.array([[-4, 0, -6]]).T
    T3 = np.array([[0, 0, -6]]).T
    
    M3 = bezierMatrix(T0, T1, T2, T3)
    bezierCurve3 = evalCurve(M3, N)

    T0 = np.array([[0, 0, -6]]).T
    T1 = np.array([[4, 0, -6]]).T
    T2 = np.array([[-4, 0, 0]]).T
    T3 = np.array([[0, 0, 0]]).T
    
    M4 = bezierMatrix(T0, T1, T2, T3)
    bezierCurve4 = evalCurve(M4, N)

    C1 = np.concatenate((bezierCurve3,bezierCurve4), axis=0)   # De la nueva nave
    print(C1.shape)

    step = 0

    while not glfw.window_should_close(window):
        # Measuring performance
        perfMonitor.update(glfw.get_time())
        glfw.set_window_title(window, title + str(perfMonitor))

        # Using GLFW to check for input events
        glfw.poll_events()

        sunRot = sg.findNode(solarSystem, "sunRotation")
        sunRot.transform = tr.rotationY(glfw.get_time())

        earthRot = sg.findNode(solarSystem, "earthRotation")
        earthRot.transform = tr.rotationY(2*glfw.get_time())

        mercurioRot = sg.findNode(solarSystem, "mercurioRotation") # NUEVO PLANETA
        mercurioRot.transform = tr.rotationY(0.5*glfw.get_time())

        venusRot = sg.findNode(solarSystem, "venusRotation") # NUEVO PLANETA
        venusRot.transform = tr.rotationY(3*glfw.get_time())

        marteRot = sg.findNode(solarSystem, "marteRotation") # NUEVO PLANETA
        marteRot.transform = tr.rotationY(0.6*glfw.get_time())

        jupiterRot = sg.findNode(solarSystem, "jupiterRotation") # NUEVO PLANETA
        jupiterRot.transform = tr.rotationY(0.1*glfw.get_time())

        saturnoRot = sg.findNode(solarSystem, "saturnoRotation") # NUEVO PLANETA
        saturnoRot.transform = tr.rotationY(0.7*glfw.get_time())

        uranoRot = sg.findNode(solarSystem, "uranoRotation") # NUEVO PLANETA
        uranoRot.transform = tr.rotationY(0.4*glfw.get_time())

        neptunoRot = sg.findNode(solarSystem, "neptunoRotation") # NUEVO PLANETA
        neptunoRot.transform = tr.rotationY(0.45*glfw.get_time())
        
        moonRot = sg.findNode(solarSystem, "moonRotation")
        moonRot.transform = tr.rotationY(5*glfw.get_time())

        moonSystem = sg.findNode(solarSystem, "moonSystem")
        moonSystem.transform = tr.rotationY(3*glfw.get_time())
        
        earthSystem = sg.findNode(solarSystem, "earthSystem")
        earthSystem.transform = tr.rotationY(0.4*glfw.get_time())

        mercurioSystem = sg.findNode(solarSystem, "mercurioSystem") #PLANETA NUEVO 
        mercurioSystem.transform = tr.rotationY(0.2*glfw.get_time())

        venusSystem = sg.findNode(solarSystem, "venusSystem") #PLANETA NUEVO 
        venusSystem.transform = tr.rotationY(0.6*glfw.get_time())

        marteSystem = sg.findNode(solarSystem, "marteSystem") #PLANETA NUEVO 
        marteSystem.transform = tr.rotationY(0.45*glfw.get_time())

        jupiterSystem = sg.findNode(solarSystem, "jupiterSystem") #PLANETA NUEVO 
        jupiterSystem.transform = tr.rotationY(0.3*glfw.get_time())

        saturnoSystem = sg.findNode(solarSystem, "saturnoSystem") #PLANETA NUEVO 
        saturnoSystem.transform = tr.rotationY(0.35*glfw.get_time())

        uranoSystem = sg.findNode(solarSystem, "uranoSystem") #PLANETA NUEVO 
        uranoSystem.transform = tr.rotationY(0.47*glfw.get_time())

        neptunoSystem = sg.findNode(solarSystem, "neptunoSystem") #PLANETA NUEVO 
        neptunoSystem.transform = tr.rotationY(0.33*glfw.get_time())
        
        processCamera()

        if glfw.get_key(window, glfw.KEY_W) == glfw.PRESS:
            if controller.pitch >= np.pi:
                controller.pitch = -np.pi/4 + 0.001
            else:
                controller.pitch = controller.pitch + 0.001

        if glfw.get_key(window, glfw.KEY_S) == glfw.PRESS:
            if controller.pitch <= -np.pi:
                controller.pitch = -np.pi/4 - 0.001
            else:
                controller.pitch = controller.pitch - 0.001

        if glfw.get_key(window, glfw.KEY_D) == glfw.PRESS:  # Agregar el movimiento de la camara
            if controller.yaw >= np.pi:
                controller.yaw = -np.pi + 0.001
            else:
                controller.yaw = controller.yaw + 0.001

        if glfw.get_key(window, glfw.KEY_A) == glfw.PRESS:   # Agregar el movimiento de la camara
            if controller.yaw <= -np.pi:
                controller.yaw = np.pi - 0.001
            else:
                controller.yaw = controller.yaw - 0.001

        
        # Movimiento del auto guiado
        nave1Node = sg.findNode(nave, "system")
        nave1Node.transform = tr.matmul([tr.translate(controller.x,controller.y,controller.z), tr.translate(7.9, 7.85, 0), tr.rotationY(15*np.pi/10)])

        view = tr.lookAt(
            controller.camPosition,
            controller.camPosition+controller.front,
            controller.camUp)

        # Clearing the screen in both, color and depth
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

        # Filling or not the shapes depending on the controller state
        if (controller.fillPolygon):
            glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)
        else:
            glPolygonMode(GL_FRONT_AND_BACK, GL_LINE)

        if controller.showAxis:
            glUseProgram(axisPipeline.shaderProgram)
            glUniformMatrix4fv(glGetUniformLocation(axisPipeline.shaderProgram, "model"), 1, GL_TRUE, tr.identity())
            axisPipeline.drawCall(gpuAxis, GL_LINES)

        if step > N*2-1:
            step = 0

        if step < N*2-1:
            angle1 = np.arctan2(C1[step+1,0]-C1[step,0], C1[step+1,2]-C1[step,2])
        else:
            angle1 = np.arctan2(C1[0,0]-C1[step,0],C1[0,2]-C1[step,2])

        nave1Node = sg.findNode(car2, "system")
        nave1Node.transform = tr.matmul([tr.translate(C1[step,0], C1[step,1], C1[step,2]), tr.translate(0, 0, 6), tr.rotationY(angle1)])
        estela1 = f_estela1(texPipeline, step, 0, 0, 6, angle1)

        if step < N*2-1:
            angle = np.arctan2(C[step+1,0]-C[step,0], C[step+1,2]-C[step,2])
        else:
            angle = np.arctan2(C[0,0]-C[step,0],C[0,2]-C[step,2])
        
        nave1Node = sg.findNode(car1, "system")
        nave1Node.transform = tr.matmul([tr.translate(C[step,0], C[step,1], C[step,2]), tr.translate(0, 0, -6),tr.rotationY(angle)])
        estela2 = f_estela2(texPipeline, step, 0, 0, -6, angle)

        nave1Node = sg.findNode(car3, "system")
        nave1Node.transform = tr.matmul([tr.translate(C1[step,0], C1[step,1], C1[step,2]), tr.translate(4, 4, 4),  tr.rotationY(angle1)])
        estela3 = f_estela1(texPipeline, step, 4, 4, 4, angle1)

        nave1Node = sg.findNode(car4, "system")
        nave1Node.transform = tr.matmul([tr.translate(C1[step,0], C1[step,1], C1[step,2]), tr.translate(-4, 4, 4),  tr.rotationY(angle1)])
        estela4 = f_estela1(texPipeline, step, -4, 4, 4, angle1)

        nave1Node = sg.findNode(car5, "system")
        nave1Node.transform = tr.matmul([tr.translate(C1[step,0], C1[step,1], C1[step,2]), tr.translate(-2, 4, 4),  tr.rotationY(angle1)])
        estela5 = f_estela1(texPipeline, step, -2, 4, 4, angle1)

        setPlot(texPipeline, axisPipeline,lightPipeline)
        step = step + 1
       
        #NOTA: Aquí dibujas tu objeto de escena
        glUseProgram(texPipeline.shaderProgram)
        glUniformMatrix4fv(glGetUniformLocation(texPipeline.shaderProgram, "view"), 1, GL_TRUE, view)
        sg.drawSceneGraphNode(estela1, texPipeline, "model")
        sg.drawSceneGraphNode(estela2, texPipeline, "model")
        sg.drawSceneGraphNode(estela3, texPipeline, "model")
        sg.drawSceneGraphNode(estela4, texPipeline, "model")
        sg.drawSceneGraphNode(estela5, texPipeline, "model")

        glUseProgram(lightPipeline.shaderProgram)
        glUniformMatrix4fv(glGetUniformLocation(lightPipeline.shaderProgram, "view"), 1, GL_TRUE, view)
        sg.drawSceneGraphNode(car1, lightPipeline, "model")
        sg.drawSceneGraphNode(car2, lightPipeline, "model")
        sg.drawSceneGraphNode(car3, lightPipeline, "model")
        sg.drawSceneGraphNode(car4, lightPipeline, "model")
        sg.drawSceneGraphNode(car5, lightPipeline, "model")
        sg.drawSceneGraphNode(nave, lightPipeline, "model")
        sg.drawSceneGraphNode(solarSystem, lightPipeline, "model")

        # Once the drawing is rendered, buffers are swap so an uncomplete drawing is never seen.
        glfw.swap_buffers(window)

    # freeing GPU memory
    gpuAxis.clear()
    estela1.clear()
    estela2.clear()
    estela3.clear()
    estela4.clear()
    estela5.clear()
    solarSystem.clear()
    

    glfw.terminate()