# coding=utf-8
"""Pinball"""

import glfw
from OpenGL.GL import *
import OpenGL.GL.shaders
import numpy as np
import random
import sys
import os.path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
import grafica.basic_shapes as bs
import grafica.easy_shaders as es
import grafica.transformations as tr
import grafica.performance_monitor as pm

__author__ = "Daniel Calderon"
__license__ = "MIT"

# Example parameters

NUMBER_OF_CIRCLES = 6
CIRCLE_DISCRETIZATION = 20
RADIUS = 0.05
WINDOW_WIDTH = 800
WINDOW_HEIGHT = 800

# Convenience function to ease initialization
def createGPUShape(pipeline, shape):
    gpuShape = es.GPUShape().initBuffers()
    pipeline.setupVAO(gpuShape)
    gpuShape.fillBuffers(shape.vertices, shape.indices, GL_STATIC_DRAW)
    return gpuShape

class Circle:
    def __init__(self, pipeline, position, velocity, r, g, b):
        shape = bs.createColorCircle(CIRCLE_DISCRETIZATION, r, g, b)
        # addapting the size of the circle's vertices to have a circle
        # with the desired radius
        scaleFactor = 2 * RADIUS
        bs.scaleVertices(shape, 6, (scaleFactor, scaleFactor, 1.0))
        self.pipeline = pipeline
        self.gpuShape = createGPUShape(self.pipeline, shape)
        self.position = position
        self.radius = RADIUS
        self.velocity = velocity

    def action(self, gravityAceleration, deltaTime):
        # Euler integration
        self.velocity += deltaTime * gravityAceleration
        self.position += self.velocity * deltaTime

    def draw(self):
        glUniformMatrix4fv(glGetUniformLocation(self.pipeline.shaderProgram, "transform"), 1, GL_TRUE,
            tr.translate(self.position[0], self.position[1], 0.0)
        )
        self.pipeline.drawCall(self.gpuShape)


### Clase de los circulos quietos
class Circle_static:
    def __init__(self, pipeline, position, radio, r, g, b):
        shape = bs.createColorCircle(CIRCLE_DISCRETIZATION, r, g, b)
        # addapting the size of the circle's vertices to have a circle
        # with the desired radius
        scaleFactor = 2 * radio
        bs.scaleVertices(shape, 6, (scaleFactor, scaleFactor, 1.0))
        self.pipeline = pipeline
        self.gpuShape = createGPUShape(self.pipeline, shape)
        self.position = position
        self.radius = radio

    def draw(self):
        glUniformMatrix4fv(glGetUniformLocation(self.pipeline.shaderProgram, "transform"), 1, GL_TRUE,
            tr.translate(self.position[0], self.position[1], 0.0)
        )
        self.pipeline.drawCall(self.gpuShape)
    

####### Barras que se mueven
class BarrasL:
    def __init__(self, pipeline, position, angulo):
        vertices = [
            0.0, 0.0, 0.0,  0.4, 0.1, 0.1,
            0.36, 0.0, 0.0,  0.4, 0.1, 0.1,
            0.03, -0.05, 0.0,  0.4, 0.1, 0.1]
        indices = [0, 1, 2]
        shape = bs.Shape(vertices, indices)
        self.angulo = angulo - np.pi/5
        self.pipeline = pipeline
        self.gpuShape = createGPUShape(self.pipeline, shape)
        self.position = position
        self.large = vertices[6] - vertices[0]
        self.position_i = np.array([vertices[0]+self.position[0],vertices[1]+self.position[1]])
        self.position_f = np.array([self.position_i[0] + self.large*np.cos(self.angulo),
                                self.position_i[1] + self.large*np.sin(self.angulo)])
        self.transform = tr.identity()
        self.norma = self.position_f - self.position_i

        self.m = (self.position_i[1]-self.position_f[1])/(self.position_i[0]-self.position_f[0])
        self.c = self.position_i[1] - self.m * self.position_i[0]

    def draw(self, angulo):
        glUniformMatrix4fv(glGetUniformLocation(self.pipeline.shaderProgram, "transform"), 1, GL_TRUE,
            tr.matmul([
            tr.translate(self.position[0], self.position[1], 0.0),
            tr.rotationZ(angulo - np.pi/5)])
        )
        self.pipeline.drawCall(self.gpuShape)


class BarrasR:
    def __init__(self, pipeline, position, angulo):
        vertices = [
            -0.36, 0.0, 0.0,  0.4, 0.1, 0.1,
            0.0, 0.0, 0.0,  0.4, 0.1, 0.1,
            -0.03, -0.05, 0.0,  0.4, 0.1, 0.1]
        indices = [0, 1, 2]
        shape = bs.Shape(vertices, indices)
        self.angulo = angulo + np.pi/5
        self.pipeline = pipeline
        self.gpuShape = createGPUShape(self.pipeline, shape)
        self.position = position
        self.large = vertices[6] - vertices[0]
        self.position_i = np.array([vertices[6]+self.position[0],vertices[7]+self.position[1]])
        self.position_f = np.array([self.position_i[0] - self.large*np.cos(self.angulo),
                                self.position_i[1] - self.large*np.sin(self.angulo)])
        self.transform = tr.identity()
        self.norma = self.position_f - self.position_i

        self.m = (self.position_f[1]-self.position_i[1])/(self.position_f[0]-self.position_i[0])
        self.c = self.position_i[1] - self.m * self.position_i[0]

    def draw(self, angulo):
        glUniformMatrix4fv(glGetUniformLocation(self.pipeline.shaderProgram, "transform"), 1, GL_TRUE,
            tr.matmul([
            tr.translate(self.position[0], self.position[1], 0.0),
            tr.rotationZ(angulo + np.pi/5)])
        )
        self.pipeline.drawCall(self.gpuShape)


class Rectangle:
    def __init__(self, pipeline, position):
        vertices = [
            -0.3, -0.15, 0.0,  1, 0, 0,
            0.3, -0.15, 0.0,  1, 0, 0,
            0.3, 0.15, 0.0,  1, 0, 0,
            -0.3, 0.15, 0.0,  1, 0, 0]
        indices = [
            0, 1, 2,
            2, 3, 0]
        shape = bs.Shape(vertices, indices)
        self.pipeline = pipeline
        self.gpuShape = createGPUShape(self.pipeline, shape)
        self.position = position
        self.transform = tr.identity()

    def draw(self):
        glUniformMatrix4fv(glGetUniformLocation(self.pipeline.shaderProgram, "transform"), 1, GL_TRUE,
            tr.translate(self.position[0], self.position[1], 0.0)
        )
        self.pipeline.drawCall(self.gpuShape)
        

def rotate2D(vector, theta):
    """
    Direct application of a 2D rotation
    """
    sin_theta = np.sin(theta)
    cos_theta = np.cos(theta)

    return np.array([
        cos_theta * vector[0] - sin_theta * vector[1],
        sin_theta * vector[0] + cos_theta * vector[1]
    ], dtype = np.float32)


def collide(circle1, circle2):
    """
    If there are a collision between the circles, it modifies the velocity of
    both circles in a way that preserves energy and momentum.
    """
    assert isinstance(circle1, Circle)
    assert isinstance(circle2, Circle)

    normal = circle2.position - circle1.position
    normal /= np.linalg.norm(normal)

    circle1MovingToNormal = np.dot(circle2.velocity, normal) > 0.0
    circle2MovingToNormal = np.dot(circle1.velocity, normal) < 0.0

    if not (circle1MovingToNormal and circle2MovingToNormal):

        # obtaining the tangent direction
        tangent = rotate2D(normal, np.pi/2.0)

        # Projecting the velocity vector over the normal and tangent directions
        # for both circles, 1 and 2.
        v1n = np.dot(circle1.velocity, normal) * normal
        v1t = np.dot(circle1.velocity, tangent) * tangent

        v2n = np.dot(circle2.velocity, normal) * normal
        v2t = np.dot(circle2.velocity, tangent) * tangent

        # swaping the normal components...
        # this means that we applying energy and momentum conservation
        circle1.velocity = v2n + v1t
        circle2.velocity = v1n + v2t

###### Creamos una funcion para un objeto quieto y otro en movimiento
def collide_quiet(circle1, obstaculo1):
    assert isinstance(circle1, Circle)
    assert isinstance(obstaculo1, Circle_static)

    normal = obstaculo1.position - circle1.position
    normal /= np.linalg.norm(normal)

    circle1MovingToNormal = np.dot(circle1.velocity, normal) < 0.0

    if not (circle1MovingToNormal):
        # obtaining the tangent direction
        tangent = rotate2D(normal, np.pi/2.0)
        v1n = np.dot(circle1.velocity, normal) * normal
        v1t = np.dot(circle1.velocity, tangent) * tangent
        circle1.velocity = v1t - v1n

def collide_pin(circle1, pin):
    assert isinstance(circle1, Circle)
    if isinstance(pin, BarrasL):
        normal = np.array([circle.position[0] - RADIUS*np.cos(pin.angulo), circle.position[1] - RADIUS*np.sin(pin.angulo)]) - circle.position 
    elif isinstance(pin, BarrasR):
        normal = np.array([circle.position[0] + RADIUS*np.cos(pin.angulo), circle.position[1] - RADIUS*np.sin(pin.angulo)]) - circle.position

    normal /= np.linalg.norm(normal)
    circle1MovingToNormal = np.dot(circle1.velocity, normal) < 0.0

    if not (circle1MovingToNormal):
        tangent = rotate2D(normal, np.pi/2.0)
        v1n = np.dot(circle1.velocity, normal) * normal
        v1t = np.dot(circle1.velocity, tangent) * tangent
        circle1.velocity = -v1t - v1n


def areColliding(circle1, circle2):
    assert isinstance(circle1, Circle)
    assert isinstance(circle2, Circle)

    difference = circle2.position - circle1.position
    distance = np.linalg.norm(difference)
    collisionDistance = circle2.radius + circle1.radius
    return distance < collisionDistance

def areColliding_o(circle1, obstaculo1):
    assert isinstance(circle1, Circle)
    assert isinstance(obstaculo1, Circle_static)

    difference = obstaculo1.position - circle1.position
    distance = np.linalg.norm(difference)
    collisionDistance = obstaculo1.radius + circle1.radius
    return distance < collisionDistance

def loseBall(pipeline, circle1):  #########Probablemente falle ya que ingresara al if del borde y ese la dara veloicidad de nuevo
    #assert isinstance(circle1, Circle)
    circle1.velocity[0] = 0
    circle1.velocity[1] = 0
    #circle1.transform = tr.translate([0, -1])
    #Circle_static(pipeline, np.array([0.9 + position/10, 0.9]), 0.01, 1, 1, 1)
    return circle1


def collideWithBorder(pipeline, circle, barra_1, barra_2):
    # Right
    if circle.position[0] + circle.radius > 1.0:
        circle.velocity[0] = -abs(circle.velocity[0])
    # Left
    if circle.position[0] < -1.0 + circle.radius:
        circle.velocity[0] = abs(circle.velocity[0])
    # Top
    if circle.position[1] > 1.0 - circle.radius:
        circle.velocity[1] = -abs(circle.velocity[1])
    # Bottom
    if circle.position[1] < -0.75 + circle.radius:
        if barra1.position_i[0] > circle.position[0] or circle.position[0] > barra2.position_i[0]:
            circle.velocity[1] = abs(circle.velocity[1])
        else:
            if controller.boton_IZQ == True:
                if circle.position[1] < barra1.position_f[0]: #- circle.radius:
                    circle.velocity[1] = abs(circle.velocity[1])

            #elif controller.boton_IZQ == False:
            #    if circle.position[0] <= ((circle.position[1] - barra1.c)/barra1.m):
            #        norma = barra1.norma
            #        norma /= np.linalg.norm(norma)
            #        if np.dot(circle.velocity, norma) > 0.0:
            #            tangent = rotate2D(norma, np.pi/2.0)
            #            v1n = np.dot(circle.velocity, norma) * norma
            #            v1t = np.dot(circle.velocity, tangent) * tangent
            #            circle.velocity = -v1t - v1n

            if controller.boton_DER == True:
                if circle.position[1] > barra2.position_f[0]: #+ circle.radius:
                    circle.velocity[1] = abs(circle.velocity[1])
            
            #elif controller.boton_IZQ == False:
            #    norma = barra2.norma
            #    norma /= np.linalg.norm(norma)
            #    if np.dot(circle.velocity, norma) > 0.0:
            #        tangent = rotate2D(norma, np.pi/2.0)
            #        v1n = np.dot(circle.velocity, norma) * norma
            #        v1t = np.dot(circle.velocity, tangent) * tangent
            #        circle.velocity = -v1t - v1n

            elif circle.position[1] < -1.5:
                loseBall(pipeline, circle)


def movimiento_izq():
    if controller.boton_IZQ == False:
        exit
    elif controller.boton_IZQ == True:
        controller.anguloL = controller.anguloL + np.pi/600
        if controller.anguloL >= np.pi/3:
            controller.boton_IZQ = False
            controller.anguloL = 0

def movimiento_der():
    if controller.boton_DER == False:
        exit
    elif controller.boton_DER == True:
        controller.anguloR = controller.anguloR - np.pi/600
        if controller.anguloR <= -np.pi/3:
            controller.boton_DER = False
            controller.anguloR = 0


# A class to store the application control
class Controller:
    def __init__(self):
        self.fillPolygon = True
        self.circleCollisions = True
        self.useGravity = False

        self.anguloL = 0
        self.anguloR = 0

        self.boton_IZQ = False
        self.boton_DER = False

        self.game_over = False

# we will use the global controller as communication with the callback function
controller = Controller()


# This function will be executed whenever a key is pressed or released
def on_key(window, key, scancode, action, mods):

    if action != glfw.PRESS:
        return
    
    global controller

    print(action)

    if key == glfw.KEY_SPACE:
        controller.fillPolygon = not controller.fillPolygon
        print("Fill polygons?", controller.fillPolygon)

    elif key == glfw.KEY_ESCAPE:
        glfw.set_window_should_close(window, True)

    elif key == glfw.KEY_1:
        controller.circleCollisions = not controller.circleCollisions
        print("Collisions among circles?", controller.circleCollisions)
    elif key == glfw.KEY_2:
        controller.useGravity = not controller.useGravity
        print("Gravity?", controller.useGravity)

    else:
        print('Unknown key')


if __name__ == "__main__":

    # Initialize glfw
    if not glfw.init():
        sys.exit(1)

    # Creating a glfw window
    title = "Pinball"
    window = glfw.create_window(WINDOW_WIDTH, WINDOW_HEIGHT, title, None, None)

    if not window:
        glfw.terminate()
        glfw.set_window_should_close(window, True)

    glfw.make_context_current(window)

    # Connecting the callback function 'on_key' to handle keyboard events
    glfw.set_key_callback(window, on_key)

    # Creating our shader program and telling OpenGL to use it
    pipeline = es.SimpleTransformShaderProgram()
    glUseProgram(pipeline.shaderProgram)

    # Setting up the clear screen color
    glClearColor(0.5, 0.5, 0.55, 1.0)

    # Creating shapes on GPU memory
    circulo_oficial = Circle(pipeline,  np.array([
            random.uniform(-0.7 + RADIUS, 1.0 - RADIUS),
            random.uniform(-0.7 + RADIUS, 1.0 - RADIUS)
        ]), np.array([
            random.uniform(-1.0, 1.0),
            random.uniform(-1.0, 1.0)]), 1, 1, 1)
    circles = [circulo_oficial]
    for i in range(NUMBER_OF_CIRCLES):
        position = np.array([
            random.uniform(-0.7 + RADIUS, 1.0 - RADIUS),
            random.uniform(-0.7 + RADIUS, 1.0 - RADIUS)
        ])
        velocity = np.array([
            random.uniform(-1.0, 1.0),
            random.uniform(-1.0, 1.0)
        ])
        r, g, b = 1.0, 0.5, 0.8
        circle = Circle(pipeline, position, velocity, r, g, b)
        circles += [circle]

    obstaculo1 = Circle_static(pipeline, np.array([0.7, 0.7]), 0.1, 1, 0.4, 0.4)
    obstaculo2 = Circle_static(pipeline, np.array([-0.7, 0.7]), 0.1, 1, 0.4, 0.4)
    obstaculo3 = Circle_static(pipeline, np.array([-1.0, -0.7]), 0.25, 1, 0, 0)
    obstaculo4 = Circle_static(pipeline, np.array([1.0, -0.7]), 0.25, 1, 0, 0)
    obstaculo5 = Circle_static(pipeline, np.array([-1.0, 0.0]), 0.15, 1, 0, 0)
    obstaculo6 = Circle_static(pipeline, np.array([1.0, 0.0]), 0.15, 1, 0, 0)
    obstaculo7 = Circle_static(pipeline, np.array([0.0, 0.0]), 0.1, 1, 0, 0)
    #obstaculo8 = Circle_static(pipeline, np.array([0.0, 0.0]), 0.1, 1, 0, 0)
    #obstaculo9 = Circle_static(pipeline, np.array([0.0, 0.0]), 0.1, 1, 0, 0)
    #obstaculo10 = Circle_static(pipeline, np.array([0.0, 0.0]), 0.1, 1, 0, 0)
    #obstaculo11 = Circle_static(pipeline, np.array([0.0, 0.0]), 0.1, 1, 0, 0)
    #obstaculo12 = Circle_static(pipeline, np.array([0.0, 0.0]), 0.1, 1, 0, 0)

    barra1 = BarrasL(pipeline, np.array([-0.4, -0.75]), controller.anguloL)
    barra2 = BarrasR(pipeline, np.array([0.4, -0.75]), controller.anguloR)
    cuadrado1 = Rectangle(pipeline, np.array([-0.7, -0.9]))
    cuadrado2 = Rectangle(pipeline, np.array([0.7, -0.9]))

    perfMonitor = pm.PerformanceMonitor(glfw.get_time(), 0.5)

    # glfw will swap buffers as soon as possible
    glfw.swap_interval(0)

    gravityAcceleration = np.array([0.0, -1.0], dtype=np.float32)
    noGravityAcceleration = np.array([0.0, 0.0], dtype=np.float32)

    # Application loop
    while not glfw.window_should_close(window):

        if controller.game_over == True:
            glfw.set_window_should_close(window, True)
            c = circles[0]
            if c[0] > -0.2 and c[0] < 0.2 and c[1] > 0.8:
                controller.game_over == True
            

        # Measuring performance
        perfMonitor.update(glfw.get_time())
        glfw.set_window_title(window, title + str(perfMonitor))

        # Using GLFW to check for input events
        glfw.poll_events()

        # Using the time as the theta parameter
        theta = glfw.get_time()
        deltaTime = perfMonitor.getDeltaTime()

        if controller.useGravity:
            acceleration = gravityAcceleration
        else:
            acceleration = noGravityAcceleration
        
        # Physics!
        for circle in circles:
            # moving each circle
            circle.action(acceleration, deltaTime)

            # checking and processing collisions against the border
            collideWithBorder(pipeline, circle, barra1, barra2)


        if glfw.get_key(window, glfw.KEY_LEFT) == glfw.PRESS:
            if barra1.angulo < 0:
                #controller.anguloL = controller.anguloL + np.pi/100
                controller.boton_IZQ = True
            elif barra2.angulo >= 0:
                controller.boton_IZQ = False
        
        if glfw.get_key(window, glfw.KEY_RIGHT) == glfw.PRESS:
            if barra2.angulo > 0:
                #controller.anguloR = controller.anguloR - np.pi/100
                controller.boton_DER = True
            elif barra2.angulo <= 0:
                controller.boton_DER = False

        movimiento_izq()
        movimiento_der()

        # checking and processing collisions among circles
        if controller.circleCollisions:
            for i in range(len(circles)):
                if areColliding_o(circles[i], obstaculo1):
                    collide_quiet(circles[i], obstaculo1)
                if areColliding_o(circles[i], obstaculo2):
                    collide_quiet(circles[i], obstaculo2)
                if areColliding_o(circles[i], obstaculo3):
                    collide_quiet(circles[i], obstaculo3)
                if areColliding_o(circles[i], obstaculo4):
                    collide_quiet(circles[i], obstaculo4)
                if areColliding_o(circles[i], obstaculo5):
                    collide_quiet(circles[i], obstaculo5)
                if areColliding_o(circles[i], obstaculo6):
                    collide_quiet(circles[i], obstaculo6)
                if areColliding_o(circles[i], obstaculo7):
                    collide_quiet(circles[i], obstaculo7)
                for j in range(i+1, len(circles)):
                    if areColliding(circles[i], circles[j]):
                        collide(circles[i], circles[j])

        # Clearing the screen
        glClear(GL_COLOR_BUFFER_BIT)

        # Filling or not the shapes depending on the controller state
        if (controller.fillPolygon):
            glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)
        else:
            glPolygonMode(GL_FRONT_AND_BACK, GL_LINE)

        # drawing all the circles
        for circle in circles:
            circle.draw()
        
        obstaculo1.draw()
        obstaculo2.draw()
        obstaculo3.draw()
        obstaculo4.draw()
        obstaculo5.draw()
        obstaculo6.draw()
        obstaculo7.draw()
        barra1.draw(controller.anguloL)
        barra2.draw(controller.anguloR)
        cuadrado1.draw() 
        cuadrado2.draw() 

        # Once the drawing is rendered, buffers are swap so an uncomplete drawing is never seen.
        glfw.swap_buffers(window)

    # freeing GPU memory
    for circle in circles:
        circle.gpuShape.clear()
    
    obstaculo1.gpuShape.clear()
    obstaculo2.gpuShape.clear()
    obstaculo3.gpuShape.clear()
    obstaculo4.gpuShape.clear()
    obstaculo5.gpuShape.clear()
    obstaculo6.gpuShape.clear()
    obstaculo7.gpuShape.clear()
    barra1.gpuShape.clear()
    barra2.gpuShape.clear()
    cuadrado1.gpuShape.clear()
    cuadrado2.gpuShape.clear()

    glfw.terminate()
